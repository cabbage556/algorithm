# 2차원 가상 벽면에 기둥과 보를 이용한 구조물 설치
#	기둥, 보: 길이가 1인 선분으로 표현됨
#	기둥, 보의 규칙
#		기둥: 바닥 위에 있거나, 보의 한쪽 끝 부분 위에 있거나, 다른 기둥 위에 있어야 함
#		보: 한쪽 끝 부분이 기둥 위에 있거나, 양쪽 끝 부분이 다른 보와 동시에 연결되어 있어야 함
#			바닥: 벽면 맨 아래 지면

# n: 벽면의 크기(5~100)
# build_frame: 기둥과 보 설치 또는 삭제 작업이 순서대로 담긴 2차원 배열
#	원소 [x, y, a, b] 형태
#		x, y: 기둥, 보를 설치 또는 삭제할 교차점 좌표 [가로 좌표, 세로 좌표]
#		a: 설치 또는 삭제할 구조물 종류(0: 기둥, 1: 보)
#		b: 구조물 설치 또는 삭제(0: 삭제, 1: 설치)
# 설치 또는 삭제 방향: 보는 오른쪽으로, 기둥은 위쪽 방향으로(교차점 좌표 기준)

# 최종 구조물 상태 규칙
#	가로 열의 길이가 3인 2차원 배열, 각 구조물의 좌표를 담음
#	원소: [x, y, a]
#		x, y: 기둥, 보의 교차점 좌표 [가로 좌표, 세로 좌표]
#		a: 구조물 종류(0: 기둥, 1: 보)
#	정렬 기준
#		x 좌표 기준으로 오름차순 정렬, x 좌표가 같을 경우 y 좌표 기준 오름차순 정렬
#		x, y 좌표가 모두 같으면 기둥이 보보다 앞에 오게 정렬

# 기둥, 보 규칙 확인 함수
def check(res):
    # 기둥 규칙
    # 바닥 위에 있는 경우: y 좌표가 0
    # 다른 기둥 위에 있는 경우: (x, y - 1) 좌표의 값이 0
    # 보의 한쪽 끝 부분 위에 있는 경우: (x, y) 좌표 또는 (x - 1, y) 좌표의 값이 1
    # 보 규칙
    # 한쪽 끝 부분이 기둥 위에 있는 경우: (x, y - 1) 좌표 또는 (x + 1, y - 1) 좌표의 값이 0
    # 양쪽 끝 부분이 다른 보와 동시에 연결된 경우: (x - 1, y) 좌표와 (x + 1, y) 좌표의 값이 모두 1

    for x, y, a in res:
        # 기둥인 경우
        if a == 0:
            if y == 0:  # 바닥 위에 있는 경우
                continue
            if [x, y - 1, 0] in res:  # 다른 기둥 위에 있는 경우
                continue
            if [x, y, 1] in res or [x - 1, y, 1] in res:  # 보의 한쪽 끝 부분 위에 있는 경우
                continue
            return False
        # 보인 경우
        else:
            if [x, y - 1, 0] in res or [x + 1, y - 1, 0] in res:  # 한쪽 끝 부분이 기둥 위에 있는 경우
                continue
            if [x - 1, y, 1] in res and [x + 1, y, 1] in res:  # 양쪽 끝 부분이 다른 보와 동시에 연결된 경우
                continue
            return False

    return True

def solution(n, build_frame):
    res = []

    for build in build_frame:
        # x, y: 가로 좌표 x, 세로 좌표 y
        # a: 기둥(0), 보(1)
        # b: 삭제(0), 설치(1)
        x, y, a, b = build

        # 설치
        if b == 1:
            # 설치 후 규칙을 만족하지 않으면 제거
            res.append([x, y, a])
            if not check(res):
                res.remove([x, y, a])
        # 삭제
        elif b == 0:
            # 삭제 후 규칙을 만족하지 않으면 설치
            res.remove([x, y, a])
            if not check(res):
                res.append([x, y, a])

    res.sort()
    return res
